// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: service.proto

package places

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlaceService_UploadPlaceInfo_FullMethodName     = "/places.PlaceService/uploadPlaceInfo"
	PlaceService_UpdatePlace_FullMethodName         = "/places.PlaceService/updatePlace"
	PlaceService_GetPlaceInfo_FullMethodName        = "/places.PlaceService/getPlaceInfo"
	PlaceService_SearchPlaces_FullMethodName        = "/places.PlaceService/searchPlaces"
	PlaceService_FilterPlaces_FullMethodName        = "/places.PlaceService/filterPlaces"
	PlaceService_RemovePlaces_FullMethodName        = "/places.PlaceService/removePlaces"
	PlaceService_SearchPlacesByOwner_FullMethodName = "/places.PlaceService/searchPlacesByOwner"
)

// PlaceServiceClient is the client API for PlaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaceServiceClient interface {
	UploadPlaceInfo(ctx context.Context, in *Place, opts ...grpc.CallOption) (*Place, error)
	UpdatePlace(ctx context.Context, in *UpdatePlace, opts ...grpc.CallOption) (*Place, error)
	GetPlaceInfo(ctx context.Context, in *PlaceId, opts ...grpc.CallOption) (*Place, error)
	SearchPlaces(ctx context.Context, in *PlaceName, opts ...grpc.CallOption) (*PlaceList, error)
	FilterPlaces(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*PlaceList, error)
	RemovePlaces(ctx context.Context, in *PlaceName, opts ...grpc.CallOption) (*Empty, error)
	SearchPlacesByOwner(ctx context.Context, in *OwnerName, opts ...grpc.CallOption) (*PlaceList, error)
}

type placeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaceServiceClient(cc grpc.ClientConnInterface) PlaceServiceClient {
	return &placeServiceClient{cc}
}

func (c *placeServiceClient) UploadPlaceInfo(ctx context.Context, in *Place, opts ...grpc.CallOption) (*Place, error) {
	out := new(Place)
	err := c.cc.Invoke(ctx, PlaceService_UploadPlaceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeServiceClient) UpdatePlace(ctx context.Context, in *UpdatePlace, opts ...grpc.CallOption) (*Place, error) {
	out := new(Place)
	err := c.cc.Invoke(ctx, PlaceService_UpdatePlace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeServiceClient) GetPlaceInfo(ctx context.Context, in *PlaceId, opts ...grpc.CallOption) (*Place, error) {
	out := new(Place)
	err := c.cc.Invoke(ctx, PlaceService_GetPlaceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeServiceClient) SearchPlaces(ctx context.Context, in *PlaceName, opts ...grpc.CallOption) (*PlaceList, error) {
	out := new(PlaceList)
	err := c.cc.Invoke(ctx, PlaceService_SearchPlaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeServiceClient) FilterPlaces(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*PlaceList, error) {
	out := new(PlaceList)
	err := c.cc.Invoke(ctx, PlaceService_FilterPlaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeServiceClient) RemovePlaces(ctx context.Context, in *PlaceName, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, PlaceService_RemovePlaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeServiceClient) SearchPlacesByOwner(ctx context.Context, in *OwnerName, opts ...grpc.CallOption) (*PlaceList, error) {
	out := new(PlaceList)
	err := c.cc.Invoke(ctx, PlaceService_SearchPlacesByOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaceServiceServer is the server API for PlaceService service.
// All implementations must embed UnimplementedPlaceServiceServer
// for forward compatibility
type PlaceServiceServer interface {
	UploadPlaceInfo(context.Context, *Place) (*Place, error)
	UpdatePlace(context.Context, *UpdatePlace) (*Place, error)
	GetPlaceInfo(context.Context, *PlaceId) (*Place, error)
	SearchPlaces(context.Context, *PlaceName) (*PlaceList, error)
	FilterPlaces(context.Context, *Filter) (*PlaceList, error)
	RemovePlaces(context.Context, *PlaceName) (*Empty, error)
	SearchPlacesByOwner(context.Context, *OwnerName) (*PlaceList, error)
	mustEmbedUnimplementedPlaceServiceServer()
}

// UnimplementedPlaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlaceServiceServer struct {
}

func (UnimplementedPlaceServiceServer) UploadPlaceInfo(context.Context, *Place) (*Place, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPlaceInfo not implemented")
}
func (UnimplementedPlaceServiceServer) UpdatePlace(context.Context, *UpdatePlace) (*Place, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlace not implemented")
}
func (UnimplementedPlaceServiceServer) GetPlaceInfo(context.Context, *PlaceId) (*Place, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaceInfo not implemented")
}
func (UnimplementedPlaceServiceServer) SearchPlaces(context.Context, *PlaceName) (*PlaceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPlaces not implemented")
}
func (UnimplementedPlaceServiceServer) FilterPlaces(context.Context, *Filter) (*PlaceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterPlaces not implemented")
}
func (UnimplementedPlaceServiceServer) RemovePlaces(context.Context, *PlaceName) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePlaces not implemented")
}
func (UnimplementedPlaceServiceServer) SearchPlacesByOwner(context.Context, *OwnerName) (*PlaceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPlacesByOwner not implemented")
}
func (UnimplementedPlaceServiceServer) mustEmbedUnimplementedPlaceServiceServer() {}

// UnsafePlaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaceServiceServer will
// result in compilation errors.
type UnsafePlaceServiceServer interface {
	mustEmbedUnimplementedPlaceServiceServer()
}

func RegisterPlaceServiceServer(s grpc.ServiceRegistrar, srv PlaceServiceServer) {
	s.RegisterService(&PlaceService_ServiceDesc, srv)
}

func _PlaceService_UploadPlaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Place)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).UploadPlaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaceService_UploadPlaceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).UploadPlaceInfo(ctx, req.(*Place))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceService_UpdatePlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).UpdatePlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaceService_UpdatePlace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).UpdatePlace(ctx, req.(*UpdatePlace))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceService_GetPlaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).GetPlaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaceService_GetPlaceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).GetPlaceInfo(ctx, req.(*PlaceId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceService_SearchPlaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).SearchPlaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaceService_SearchPlaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).SearchPlaces(ctx, req.(*PlaceName))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceService_FilterPlaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).FilterPlaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaceService_FilterPlaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).FilterPlaces(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceService_RemovePlaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).RemovePlaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaceService_RemovePlaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).RemovePlaces(ctx, req.(*PlaceName))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceService_SearchPlacesByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).SearchPlacesByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaceService_SearchPlacesByOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).SearchPlacesByOwner(ctx, req.(*OwnerName))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaceService_ServiceDesc is the grpc.ServiceDesc for PlaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "places.PlaceService",
	HandlerType: (*PlaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "uploadPlaceInfo",
			Handler:    _PlaceService_UploadPlaceInfo_Handler,
		},
		{
			MethodName: "updatePlace",
			Handler:    _PlaceService_UpdatePlace_Handler,
		},
		{
			MethodName: "getPlaceInfo",
			Handler:    _PlaceService_GetPlaceInfo_Handler,
		},
		{
			MethodName: "searchPlaces",
			Handler:    _PlaceService_SearchPlaces_Handler,
		},
		{
			MethodName: "filterPlaces",
			Handler:    _PlaceService_FilterPlaces_Handler,
		},
		{
			MethodName: "removePlaces",
			Handler:    _PlaceService_RemovePlaces_Handler,
		},
		{
			MethodName: "searchPlacesByOwner",
			Handler:    _PlaceService_SearchPlacesByOwner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
